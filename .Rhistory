library(plotly)
library(scales)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(lubridate)
library(zoo)
library(tidyr)
library(ggplot2)
runApp('Daniels_Shyni')
data_covid <- read_csv("Daniels_Shyni/data/Indonesia.csv")
data_covid$Date <- dmy(data_covid$Date)
data_covid$Month <- month(data_covid$Date, label = T, abbr = F)
data_covid$Year <- year(data_covid$Date)
data_covid$month_year <- as.yearmon(data_covid$Date,"%m/%Y")
data_covid$Province <- as.factor(data_covid$Province)
pivot_covid <- pivot_longer(data = data_covid, cols = c("Cumulative_Recovered","Cumulative_Death"),
names_to = "ratio", values_to = "Nilai")
pivot_covid$ratio <- as.factor(pivot_covid$ratio)
str(pivot_covid)
runApp('Daniels_Shyni')
data_covid <- read_csv("data/Indonesia.csv")
data_covid$Date <- dmy(data_covid$Date)
data_covid$Date <- dmy(data_covid$Date)
data_covid <- read_csv("Daniels_Shyni/data/Indonesia.csv")
data_covid$Date <- dmy(data_covid$Date)
data_covid$Month <- month(data_covid$Date, label = T, abbr = F)
str(pivot_covid)
runApp('Daniels_Shyni')
runApp('Daniels_Shyni')
runApp('Daniels_Shyni')
dashboardPage(
skin = "red",
dashboardHeader(title = "Indonesia Covid 19"),
dashboardSidebar(
sidebarMenu(
menuItem(
text = "Personal",
tabName = "personal",
icon = icon("gears")
),
selectInput(
inputId = "monthyear",
label = "Month&Year:",
choices = pivot_covid$month_year,
selected = TRUE
),
menuItem("About Me", icon = icon("linkedin"),
href = "https://www.linkedin.com/in/daniel-lumban-gaol-b91099190/")
)
),
dashboardBody(
tabItems(
tabItem(
tabName = "Overview",
fluidRow(
box(
title = "Average of Covid 19 Cases",
width = 12,
selectInput(
inputId = "province",
label = "Province:",
choices = pivot_covid$Province,
selected = TRUE
),
valueBoxOutput(
outputId = "daily_case", width = 3
),
valueBoxOutput(
outputId = "daily_death", width = 3
),
valueBoxOutput(
outputId = "daily_recovered", width = 3
),
valueBoxOutput(
outputId = "daily_active", width = 3
)
)
)
)
)
)
)
server <- function(input, output) {
showNotification("Created by Daniel Lumban Gaol", duration = NULL, type
= "message")
reactive_case <- reactive({
pivot_covid %>%
filter(Province == input$province)
})
reactive_grafik <- reactive({
pivot_covid %>%
filter(month_year == input$monthyear)
})
reactive_monthyear <- reactive({
pivot_covid %>%
filter(month_year == input$monthyear, Province == input$province)
})
output$daily_case <- renderValueBox({
value_daily_case <- reactive_monthyear() %>%
pull(Daily_Case) %>%
mean() %>%
round(2)
valueBox(
value = value_daily_case,
subtitle = "Avg Monthly Covid Case ",
icon = icon("virus"),
color = "green", width = 3
)
})
output$daily_death <- renderValueBox({
value_daily_death <- reactive_monthyear() %>%
pull(Daily_Death) %>%
mean() %>%
round(2)
valueBox(
value = value_daily_death,
subtitle = "Avg Monthly Death Case",
icon = icon("virus"),
color = "red", width = 3
)
})
output$daily_recovered <- renderValueBox({
value_daily_recovered <- reactive_monthyear() %>%
pull(Daily_Recovered) %>%
mean() %>%
round(2)
valueBox(
value = value_daily_recovered,
subtitle = "Avg Monthly Recovered Case",
icon = icon("virus"),
color = "green", width = 3
)
})
output$daily_active <- renderValueBox({
value_daily_active <- reactive_monthyear() %>%
pull(Active_Case) %>%
mean() %>%
round(2)
valueBox(
value = value_daily_active,
subtitle = "Avg Monthy Active Case",
icon = icon("virus"),
color = "red", width = 3
)
})
output$provNum <- renderPlotly({
DC <- reactive_grafik() %>%
group_by(Province) %>%
summarise(total_death = sum(Daily_Death)) %>%
arrange(desc(total_death)) %>%
head(5)
p <- DC %>%
ggplot(aes(x = total_death, y = reorder(Province, total_death)))+
geom_col(aes(fill = Province))+
labs(title = "Top 5 Provinces",
x = "Death Case Value",
y = NULL)+
theme(legend.position = "none")
ggplotly(p)
})
output$persCase <- renderPlotly({
pivot <- reactive_case()
piv <- pivot %>%
ggplot(aes(x= Nilai, y= reorder(month_year,Nilai)))+
geom_col(aes(fill= ratio), postion = "dodge", show.legend = F, width= 0.7)+
scale_fill_manual(values = c("blue","firebrick4"))+
geom_text(aes(label = round(Nilai,3)),color = "white",hjust = 0.9,size = 3)+
facet_wrap(~ratio,scales = "free_x")
labs(title = "Recovered and Death Ratio/Month",
x=""
, y="Month&Year")+theme(legend.position = "none")
ggplotly(piv)
})
}
runApp('Daniels_Shyni')
shiny::runApp('Daniels_Shyni')
runApp('Daniels_Shyni')
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
pivot_covid$month_year
unique(pivot_covid$month_year)
unique(pivot_covid$Province)
runApp()
